---
description:
globs:
alwaysApply: true
---
# Error Suppression Justification Rule

**REQUIRED**: All ESLint and TypeScript error suppressions must include clear justification explaining why the error is being disabled.

## Rules

- **Never disable errors without justification** - Every suppression must explain the reason
- **Be specific about the underlying issue** - Explain what causes the error and why it's acceptable
- **Indicate if it's intentional vs temporary** - Clarify whether this is a design choice or technical debt
- **Reference context when helpful** - Mention if it's test-specific, external library limitation, etc.

## Required Patterns

### TypeScript Error Suppressions

```typescript
// ✅ GOOD - Clear justification with context
// @ts-expect-error - Using string literal for test simplicity instead of branded Id type
id: "test-layer",

// @ts-expect-error - External library expects exact interface, satisfies not compatible
const thirdPartyOptions: ThirdPartyLibraryOptions = {
    setting1: "value1",
};

// @ts-expect-error - Temporary during migration from legacy code
const legacyData: LegacyType = {
    // TODO: Migrate to satisfies pattern in next refactor cycle
};

// ❌ BAD - No justification
// @ts-expect-error
id: "test-layer",

// ❌ BAD - Vague justification
// @ts-expect-error - Fix this later
id: "test-layer",
```

### ESLint Rule Suppressions

```typescript
// ✅ GOOD - File-level disable with scope explanation
/* eslint-disable @typescript-eslint/no-explicit-any */
// Test file uses any types for mock data that bypasses runtime validation

// ✅ GOOD - Inline disable with specific reason
const data = apiResponse as any; // eslint-disable-line @typescript-eslint/no-explicit-any -- External API returns untyped data

// ✅ GOOD - Block disable with context
/* eslint-disable @typescript-eslint/no-unused-vars */
// Destructuring to omit properties from object spread
const { password, ...safeUser } = user;
/* eslint-enable @typescript-eslint/no-unused-vars */

// ❌ BAD - No explanation
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const data = apiResponse as any;

// ❌ BAD - Generic excuse
// eslint-disable-next-line @typescript-eslint/no-explicit-any -- TODO
const data = apiResponse as any;
```

## Justification Categories

### **Test-Specific Suppressions**
```typescript
// @ts-expect-error - Test data uses simplified types for readability
// @ts-expect-error - Mock implementation doesn't match full interface
/* eslint-disable @typescript-eslint/no-explicit-any */
// Test file bypasses type checking for mock data setup
```

### **External Library Limitations**
```typescript
// @ts-expect-error - Third-party library requires exact interface match
// @ts-expect-error - Legacy library doesn't have proper TypeScript definitions
/* eslint-disable @typescript-eslint/no-var-requires */
// CommonJS module required for Node.js compatibility
```

### **Intentional Design Choices**
```typescript
// @ts-expect-error - Using branded types with string literals for API compatibility
// @ts-expect-error - Runtime validation ensures type safety despite TypeScript warning
/* eslint-disable @typescript-eslint/no-unused-vars */
// Destructuring to omit properties from object spread - variables intentionally unused
```

### **Technical Debt (Temporary)**
```typescript
// @ts-expect-error - TODO: Refactor to use proper branded types in v2.0
// @ts-expect-error - Temporary until migration to new API is complete
/* eslint-disable @typescript-eslint/ban-ts-comment */
// Legacy code cleanup scheduled for next sprint
```

## Anti-Patterns (Forbidden)

```typescript
// ❌ FORBIDDEN - No justification
// @ts-expect-error
// @ts-ignore
// eslint-disable-next-line

// ❌ FORBIDDEN - Vague justifications
// @ts-expect-error - Fix later
// @ts-expect-error - Broken types
// eslint-disable-next-line -- TODO

// ❌ FORBIDDEN - Generic excuses
// @ts-expect-error - TypeScript is wrong
// @ts-expect-error - This should work
// eslint-disable-next-line -- Not important
```

## Review Checklist

During code review, verify each suppression has:

- [ ] **Clear explanation** of what causes the error
- [ ] **Justification** for why suppression is acceptable
- [ ] **Context** indicating scope (test, external lib, migration, etc.)
- [ ] **Timeline** if it's temporary technical debt
- [ ] **Alternative considered** if there were other options

## Examples from Codebase

Reference [sync-utils.test.ts](mdc:src/lib/modules/map/utils/sync-utils.test.ts) for examples of proper test-specific error suppressions.

## Benefits

- **Code Quality**: Forces consideration of alternatives before suppressing errors
- **Maintainability**: Future developers understand why suppressions exist
- **Technical Debt Tracking**: Clear identification of temporary vs permanent suppressions
- **Review Process**: Easier to evaluate necessity during code review
- **Documentation**: Self-documenting code with context for decisions
