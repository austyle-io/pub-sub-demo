---
description:
globs:
alwaysApply: true
---
# Naming Conventions

Consistent naming patterns across the codebase for improved readability and maintainability.

## Rules

- Use PascalCase for components and types
- Use camelCase for functions and variables
- Use SCREAMING_SNAKE_CASE for constants
- Use kebab-case for file names
- Use descriptive names that convey intent

## Component and Type Naming

```typescript
// ✅ GOOD - PascalCase for components
export const UserProfile = ({ user }: UserProfileProps) => {
  return <div>{user.name}</div>;
};

export const NavigationMenu = () => {
  return <nav>...</nav>;
};

// ✅ GOOD - PascalCase for types
export type UserProfileProps = {
  user: User;
  onEdit?: () => void;
};

export type ApiResponse<T> = {
  data: T;
  status: number;
  message: string;
};

// ❌ BAD - Wrong casing
export const userProfile = () => {}; // Should be UserProfile
export type userProfileProps = {}; // Should be UserProfileProps

// ❌ BAD - Interface anti-patterns
export interface IUser {}; // Should be: export type User = {}
export interface UserInterface {}; // Should be: export type User = {}
export type MyComponent = {}; // Should be: export type LayerManagementWidget = {}
export type CustomHandler = {}; // Should be: export type LayerVisibilityHandler = {}
```

## Function and Variable Naming

```typescript
// ✅ GOOD - camelCase for functions and variables
const calculateTotal = (items: Item[]) => {
    return items.reduce((sum, item) => sum + item.price, 0);
};

const formatUserName = (user: User) => {
    return `${user.firstName} ${user.lastName}`;
};

const isUserActive = (user: User) => {
    return user.status === "active";
};

// Variables
const currentUser = getCurrentUser();
const selectedItems = getSelectedItems();
const hasPermission = checkUserPermission();

// ❌ BAD - Wrong casing or unclear names
const Calculate_Total = () => {}; // Should be calculateTotal
const fmt = () => {}; // Should be formatUserName
const check = () => {}; // Should be isUserActive
const u = getUser(); // Should be currentUser
```

## Constant Naming

```typescript
// ✅ GOOD - SCREAMING_SNAKE_CASE for constants
export const API_BASE_URL = "https://api.example.com";
export const MAX_RETRY_ATTEMPTS = 3;
export const DEFAULT_TIMEOUT = 5000;

export const USER_ROLES = {
    ADMIN: "admin",
    MODERATOR: "moderator",
    USER: "user",
} as const;

export const HTTP_STATUS = {
    OK: 200,
    NOT_FOUND: 404,
    SERVER_ERROR: 500,
} as const;

// ❌ BAD - Wrong casing
export const apiBaseUrl = "https://api.example.com"; // Should be API_BASE_URL
export const maxRetries = 3; // Should be MAX_RETRY_ATTEMPTS
```

## File Naming

### Component Files

```
✅ GOOD - PascalCase for React components
UserProfile.tsx
NavigationMenu.tsx
ErrorBoundary.tsx
LoginForm.tsx
```

### Non-Component Files

```
✅ GOOD - kebab-case for all other files
api-client.ts
error-handling.ts
data-utils.ts
user-types.ts
validation-utils.ts
```

### Hook Files

```
✅ GOOD - camelCase for hooks
useUserData.ts
useLocalStorage.ts
useApiClient.ts
```

### Anti-Patterns

```
❌ BAD - Wrong naming patterns
userProfile.tsx (components should be UserProfile.tsx)
User_Profile.tsx (should be UserProfile.tsx)
user-profile.tsx (components should be UserProfile.tsx)
apiClient.ts (should be api-client.ts)
```

**Rule Summary:**

- **React Components**: PascalCase.tsx (UserProfile.tsx)
- **Hooks**: camelCase.ts (useUserData.ts)
- **All Other Files**: kebab-case.ts (api-client.ts, user-types.ts)

## Boolean Variables and Functions

```typescript
// ✅ GOOD - Boolean naming with is/has/can/should prefixes
const isLoading = false;
const hasPermission = checkUserAccess();
const canEdit = user.role === "admin";
const shouldShowModal = !hasSeenTutorial;

// Functions returning booleans
const isValidEmail = (email: string): boolean => {
    return email.includes("@");
};

const hasRequiredFields = (data: FormData): boolean => {
    return data.name && data.email;
};

// ❌ BAD - Unclear boolean naming
const loading = false; // Should be isLoading
const permission = checkAccess(); // Should be hasPermission
const valid = checkEmail(); // Should be isValidEmail
```

## Event Handler Naming

```typescript
// ✅ GOOD - Event handler conventions
type ComponentProps = {
  // Props use 'on' prefix
  onClick?: () => void;
  onSubmit?: (data: FormData) => void;
  onChange?: (value: string) => void;
  onUserSelect?: (user: User) => void;
};

const Component = ({ onClick, onSubmit, onChange }: ComponentProps) => {
  // Internal handlers use 'handle' prefix
  const handleClick = () => {
    onClick?.();
  };

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    onSubmit?.(new FormData(e.currentTarget));
  };

  const handleInputChange = (e: ChangeEvent<HTMLInputElement>) => {
    onChange?.(e.target.value);
  };

  return (
    <form onSubmit={handleSubmit}>
      <input onChange={handleInputChange} />
      <button onClick={handleClick}>Submit</button>
    </form>
  );
};
```

## API and Service Naming

```typescript
// ✅ GOOD - Clear API function naming
const fetchUserById = async (id: string): Promise<User> => {
    // Implementation
};

const createUser = async (userData: CreateUserRequest): Promise<User> => {
    // Implementation
};

const updateUserProfile = async (id: string, updates: Partial<User>): Promise<User> => {
    // Implementation
};

const deleteUser = async (id: string): Promise<void> => {
    // Implementation
};

// Service class naming
export class UserService {
    async getUser(id: string): Promise<User> {}
    async createUser(data: CreateUserRequest): Promise<User> {}
    async updateUser(id: string, updates: Partial<User>): Promise<User> {}
    async deleteUser(id: string): Promise<void> {}
}

// ❌ BAD - Unclear naming
const get = async (id: string) => {}; // Should be fetchUserById
const save = async (data: any) => {}; // Should be createUser or updateUser
const remove = async (id: string) => {}; // Should be deleteUser
```

## Descriptive Intent Names

```typescript
// ✅ GOOD - Names that convey intent
const calculateDiscountedPrice = (price: number, discountPercent: number) => {
    return price * (1 - discountPercent / 100);
};

const validateUserInput = (input: string) => {
    return input.trim().length > 0;
};

const formatCurrencyForDisplay = (amount: number, currency: string) => {
    return new Intl.NumberFormat("en-US", {
        style: "currency",
        currency,
    }).format(amount);
};

// ❌ BAD - Unclear or abbreviated names
const calc = (p: number, d: number) => {}; // Should be calculateDiscountedPrice
const validate = (i: string) => {}; // Should be validateUserInput
const fmt = (a: number, c: string) => {}; // Should be formatCurrencyForDisplay
```

## Benefits

- **Readability**: Code is self-documenting with clear names
- **Consistency**: Predictable naming patterns across the codebase
- **Maintainability**: Easy to understand and modify code
- **Team Collaboration**: Shared naming conventions reduce confusion
- **IDE Support**: Better autocomplete and navigation with descriptive names
