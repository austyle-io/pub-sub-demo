---
description:
globs:
alwaysApply: true
---
# No Mock Data in Production Code

Rules for avoiding mock data in production code while allowing it in demos and development.

## Rules

-   Never include mock data in production components or utilities
-   Mock data is only allowed in demo components and development tools
-   Use proper data fetching patterns with loading states instead of mock data
-   Create separate demo components that clearly show they contain mock data
-   Use environment checks to conditionally show mock data during development

## Production Code Patterns

```typescript
// ✅ GOOD - Proper data fetching without mock data
const UserList = () => {
    const [users, setUsers] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        const fetchUsers = async () => {
            try {
                const response = await fetch('/api/users');
                const data = await response.json();
                setUsers(data);
            } catch (err) {
                setError('Failed to load users');
            } finally {
                setIsLoading(false);
            }
        };

        fetchUsers();
    }, []);

    if (isLoading) return <LoadingSpinner />;
    if (error) return <ErrorMessage message={error} />;

    return (
        <div>
            {users.map(user => (
                <UserCard key={user.id} user={user} />
            ))}
        </div>
    );
};

// ❌ BAD - Mock data in production component
const UserList = () => {
    const mockUsers = [ // BAD - Mock data in production code
        { id: 1, name: "John Doe", email: "john@example.com" },
        { id: 2, name: "Jane Smith", email: "jane@example.com" },
    ];

    return (
        <div>
            {mockUsers.map(user => (
                <UserCard key={user.id} user={user} />
            ))}
        </div>
    );
};
```

## Demo Component Patterns

```typescript
// ✅ GOOD - Demo component with clear naming and mock data
const UserListDemo = () => {
    // Mock data is acceptable in demo components
    const mockUsers: User[] = [
        {
            id: "demo-1",
            name: "John Doe",
            email: "john.doe@example.com",
            role: "admin",
            createdAt: "2025-06-20T00:00:00Z",
        },
        {
            id: "demo-2",
            name: "Jane Smith",
            email: "jane.smith@example.com",
            role: "user",
            createdAt: "2025-06-21T00:00:00Z",
        },
    ];

    return (
        <div className="demo-container">
            <div className="demo-badge">
                Demo Component - Contains Mock Data
            </div>
            <UserList users={mockUsers} />
        </div>
    );
};

// ✅ GOOD - Development-only mock data with environment check
const UserListWithMockData = () => {
    const [users, setUsers] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const loadUsers = async () => {
            if (process.env.NODE_ENV === 'development' && process.env.USE_MOCK_DATA === 'true') {
                // Mock data only in development with explicit flag
                const mockUsers: User[] = [
                    { id: "dev-1", name: "Dev User", email: "dev@example.com", role: "user" },
                ];
                setUsers(mockUsers);
                setIsLoading(false);
            } else {
                // Real data fetching for production
                try {
                    const response = await fetch('/api/users');
                    const data = await response.json();
                    setUsers(data);
                } catch (error) {
                    console.error('Failed to fetch users:', error);
                } finally {
                    setIsLoading(false);
                }
            }
        };

        loadUsers();
    }, []);

    if (isLoading) return <LoadingSpinner />;

    return <UserList users={users} />;
};
```

## Storybook and Testing Patterns

```typescript
// ✅ GOOD - Mock data in Storybook stories
// UserCard.stories.tsx
export default {
    title: 'Components/UserCard',
    component: UserCard,
} as Meta;

export const Default: Story = {
    args: {
        user: {
            id: "story-1",
            name: "Story User",
            email: "story@example.com",
            role: "user",
        },
    },
};

export const AdminUser: Story = {
    args: {
        user: {
            id: "story-2",
            name: "Admin User",
            email: "admin@example.com",
            role: "admin",
        },
    },
};

// ✅ GOOD - Mock data in tests
// UserCard.test.tsx
describe('UserCard', () => {
    const mockUser: User = {
        id: "test-1",
        name: "Test User",
        email: "test@example.com",
        role: "user",
    };

    it('renders user information correctly', () => {
        render(<UserCard user={mockUser} />);
        expect(screen.getByText("Test User")).toBeInTheDocument();
    });
});
```

## Proper Loading States

```typescript
// ✅ GOOD - Proper loading states instead of mock data
const Dashboard = () => {
    const [stats, setStats] = useState<DashboardStats | null>(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const fetchStats = async () => {
            const response = await fetch('/api/dashboard/stats');
            const data = await response.json();
            setStats(data);
            setIsLoading(false);
        };

        fetchStats();
    }, []);

    if (isLoading) {
        return (
            <div className="dashboard">
                <StatsCardSkeleton />
                <ChartSkeleton />
                <TableSkeleton />
            </div>
        );
    }

    return (
        <div className="dashboard">
            <StatsCard stats={stats} />
            <Chart data={stats?.chartData} />
            <Table data={stats?.tableData} />
        </div>
    );
};
```

## File Naming Conventions

```
✅ GOOD - Clear demo naming
components/
  UserList.tsx              # Production component
  UserListDemo.tsx           # Demo component with mock data
  UserList.stories.tsx       # Storybook with mock data
  UserList.test.tsx          # Tests with mock data

demos/
  user-management-demo.tsx   # Demo files in dedicated directory
  dashboard-demo.tsx
  analytics-demo.tsx

❌ BAD - Unclear naming
components/
  UserList.tsx              # Contains mock data (BAD)
  UserListExample.tsx       # Unclear if production or demo
```

## Benefits

-   **Production Safety**: Eliminates accidental mock data in production builds
-   **Clear Intent**: Demo components clearly indicate they contain mock data
-   **Proper Development**: Encourages proper data fetching patterns
-   **Testing Clarity**: Mock data is appropriately scoped to tests and stories
-   **Performance**: No unnecessary mock data bundled in production
-   **Debugging**: Easier to identify real vs mock data issues
