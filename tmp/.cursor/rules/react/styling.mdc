---
description:
globs:
alwaysApply: true
---
# Styling & CSS

CSS and styling patterns for React components.

## Rules

-   Always prefer Tailwind CSS over component-level styles
-   Use utility-first approach with Tailwind classes

## Tailwind CSS Usage

```typescript
// Preferred - Tailwind utility classes
const Button = ({ variant, size }: ButtonProps) => {
  const baseClasses = 'px-4 py-2 rounded font-medium focus:outline-none';

  const variantClasses = {
    primary: 'bg-blue-600 text-white hover:bg-blue-700',
    secondary: 'bg-gray-200 text-gray-900 hover:bg-gray-300',
  };

  const sizeClasses = {
    sm: 'text-sm px-3 py-1',
    md: 'text-base px-4 py-2',
    lg: 'text-lg px-6 py-3',
  };

  return (
    <button
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]}`}
    >
      Button Text
    </button>
  );
};

// Avoid - component-level styles
const Button = styled.button` // BAD
  padding: 1rem 2rem;
  background-color: blue;
  color: white;
  border-radius: 0.5rem;
`;
```

## Conditional Classes

```typescript
// Use template literals for dynamic classes
const Card = ({ isSelected, isDisabled }: CardProps) => {
  return (
    <div
      className={`
        p-4 rounded-lg border
        ${isSelected ? 'border-blue-500 bg-blue-50' : 'border-gray-200'}
        ${isDisabled ? 'opacity-50 cursor-not-allowed' : 'hover:shadow-md'}
      `}
    >
      Card Content
    </div>
  );
};

// Or use utility functions for complex conditions
const getCardClasses = (isSelected: boolean, isDisabled: boolean) => {
  const base = 'p-4 rounded-lg border';
  const selected = isSelected ? 'border-blue-500 bg-blue-50' : 'border-gray-200';
  const interactive = isDisabled
    ? 'opacity-50 cursor-not-allowed'
    : 'hover:shadow-md cursor-pointer';

  return `${base} ${selected} ${interactive}`;
};
```

## Responsive Design

```typescript
import { ReactNode } from 'react';

// Use Tailwind responsive prefixes
const ResponsiveGrid = ({ children }: { children: ReactNode }) => {
  return (
    <div className="
      grid
      grid-cols-1
      sm:grid-cols-2
      md:grid-cols-3
      lg:grid-cols-4
      gap-4
      p-4
    ">
      {children}
    </div>
  );
};
```

## Benefits of Utility-First

-   **Consistency**: Design system built into class names
-   **Performance**: No CSS-in-JS runtime overhead
-   **Maintainability**: Styles co-located with components
-   **Responsive**: Built-in responsive design utilities
-   **Bundle Size**: Purged unused styles in production
