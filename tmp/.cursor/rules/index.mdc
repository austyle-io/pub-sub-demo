---
description:
globs:
alwaysApply: true
---
# Cursor Rules Index

This directory contains modular coding rules organized by category. Reference specific rule files in prompts as needed.

## ðŸ“š **Quick Reference**

### Core TypeScript/JavaScript Patterns

- `@rules/core/union-literals.md` - Union literal constants with `as const`
- `@rules/core/function-style.md` - Arrow functions and function patterns
- `@rules/core/logical-operators.md` - Nullish coalescing and optional chaining
- `@rules/core/null-vs-undefined.md` - Null vs undefined usage patterns
- `@rules/core/explicit-vs-implicit.md` - Explicit vs implicit coding patterns
- `@rules/core/duck-typing-prevention.md` - Ban duck typing, prefer satisfies operator
- `@rules/core/ban-double-type-assertions.md` - Ban double type assertions (`as unknown as`)
- `@rules/core/global-types-safety.md` - Safe global variable access and runtime detection
- `@rules/core/type-safety-enforcement.md` - Comprehensive type safety rules
- `@rules/core/lodash-usage-patterns.md` - Always use lodash for consistency and reliability
- `@rules/core/imports.md` - Import/export patterns and lodash usage
- `@rules/core/typescript-patterns.md` - Core TypeScript coding patterns
- `@rules/core/type-system.md` - Type system preferences
- `@rules/core/code-structure.md` - Object patterns and code organization
- `@rules/core/code-formatting.md` - Code formatting and layout rules
- `@rules/core/generic-utils.md` - Type-safe generic utility functions

### React Patterns

- `@rules/react/component-patterns.md` - Component structure and prop patterns
- `@rules/react/react-specific.md` - React-specific coding patterns
- `@rules/react/styling.md` - CSS and Tailwind patterns

### Architecture & Organization

- `@rules/architecture/file-organization.md` - File size limits and organization
- `@rules/architecture/directory-structure.md` - Directory structure patterns
- `@rules/architecture/component-extraction.md` - Component extraction rules
- `@rules/architecture/utility-organization.md` - Utility function organization
- `@rules/architecture/store-patterns.md` - State management patterns
- `@rules/architecture/migration-patterns.md` - Refactoring and migration rules

### Advanced Patterns

- `@rules/advanced/enum-object-pattern.md` - Enum-object with lookup helpers
- `@rules/advanced/classnames-prop-pattern.md` - Standardized className props
- `@rules/advanced/zod-type-guard-pattern.md` - Zod validation patterns

### Code Quality

- `@rules/quality/error-handling.md` - Error handling patterns
- `@rules/quality/performance.md` - Performance considerations
- `@rules/quality/naming-conventions.md` - Naming standards
- `@rules/quality/documentation.md` - Documentation and comments
- `@rules/quality/no-mock-data.md` - Avoid mock data in production code
- `@rules/quality/code-review-checklist.md` - Code review checklist
- `@rules/quality/bdd-testing-patterns.md` - BDD testing with QuickPickle patterns
- `@rules/quality/error-suppression-justification.md` - Error suppression justification
- `@rules/quality/sonarqube-compliance.md` - SonarQube compliance patterns
- `@rules/quality/safe-testing-linting.md` - Safe testing and linting practices
- `@rules/quality/runtime-environment-detection.md` - SSR-safe environment detection

### Domain-Specific

- `@rules/domain/map-widget-patterns.md` - Map and Widget module naming patterns

### Pattern Rules

- `@rules/patterns/factory-pattern.md` - Factory pattern for test data

## ðŸŽ¯ **Usage in Prompts**

### Include All Rules

```
@rules/index.md - Follow all established coding patterns
```

### Include Specific Categories

```
@rules/core/ @rules/react/
```

### Include Individual Rules

```
@rules/core/union-literals.md @rules/react/component-patterns.md
```

### Include Architecture Rules

```
@rules/architecture/ - Follow all architectural patterns
```

### Include Advanced Patterns

```
@rules/advanced/ - Apply advanced coding patterns
```

### Include Quality Rules

```
@rules/quality/ - Apply code quality patterns
```

### Include Domain-Specific Rules

```
@rules/domain/ - Apply domain-specific naming patterns
```

## ðŸ“‹ **Rule Categories**

### **Core (16 rules)** - Fundamental TypeScript/JavaScript patterns

### **React (3 rules)** - React-specific patterns and components

### **Architecture (6 rules)** - File organization and structure

### **Advanced (3 rules)** - Complex patterns and specialized rules

### **Quality (11 rules)** - Code quality and maintainability

### **Domain (1 rule)** - Domain-specific patterns for Map/Widget modules

### **Patterns (1 rule)** - Reusable coding patterns

## ðŸš€ **Benefits**

- **Modular**: Include only relevant rules for specific tasks
- **Organized**: Easy to find and reference specific patterns
- **Maintainable**: Update individual rules without affecting others
- **Comprehensive**: Complete coverage of all coding standards
- **Battle-Tested**: Derived from successful real-world implementations

## ðŸ“ˆ **Total Coverage**

**41 focused rule files** covering:

- Union literals and const object patterns
- Function styles and TypeScript patterns
- Null vs undefined usage patterns
- Explicit vs implicit coding patterns
- Duck typing prevention with satisfies operator
- Ban on double type assertions (`as unknown as`)
- Global types safety and runtime environment detection
- Comprehensive type safety enforcement
- Lodash-first approach for consistency and reliability
- Type-safe generic utilities
- React component architecture
- File organization and directory structure
- State management with context providers
- Advanced patterns (enum-objects, className props, Zod validation)
- Code quality (error handling, performance, naming, documentation, no mock data, code review)
- BDD testing patterns with QuickPickle and type-safe world context
- Error suppression justification requirements
- SonarQube compliance patterns
- Safe testing and linting practices
- Runtime environment detection for SSR compatibility
- Migration and refactoring strategies
- Domain-specific patterns for Map and Widget modules
- Factory pattern for type-safe test data generation
