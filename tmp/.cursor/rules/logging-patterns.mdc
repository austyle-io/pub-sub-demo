---
description:
globs:
alwaysApply: true
---
# Logging Framework Rules

**REQUIRED**: Use our Pino-based structured logging framework instead of console logging or any other logging systems.

## Rules

- **NEVER use `console.log`, `console.error`, `console.warn`, `console.info`, `console.debug`** in production code
- **ALWAYS use our structured logging system** with [Logger.ts](mdc:src/lib/services/Logger.ts)
- **Use `useComponentLogger` hook** in React components following [useComponentLogger.ts](mdc:src/lib/hooks/useComponentLogger.ts)
- **Use module-specific loggers** like [map Logger.ts](mdc:src/lib/modules/map/services/Logger.ts) and [db logger.ts](mdc:src/lib/db/logger.ts)
- **Prepare for Grafana LGTM stack** using [GrafanaLogger.ts](mdc:src/lib/services/grafana/GrafanaLogger.ts)
- **Wrap applications with LoggerProvider** following [LoggerProvider.tsx](mdc:src/lib/providers/LoggerProvider.tsx)

## Required Patterns

### React Component Logging

```typescript
import { useComponentLogger } from "@/lib/hooks/useComponentLogger";

export const MyComponent = ({ userId }: MyComponentProps) => {
    const logger = useComponentLogger("MyComponent");

    const handleAction = () => {
        logger.info("User action performed", {
            userId,
            action: "button-click",
            timestamp: new Date().toISOString(),
        });
    };

    return <button onClick={handleAction}>Action</button>;
};
```

### Service/Utility Logging

```typescript
import { createAppLogger } from "@/lib/services/Logger";

const logger = createAppLogger("my-service");

export const myServiceFunction = async (data: unknown) => {
    logger.info("Processing request", { dataType: typeof data });

    try {
        const result = await processData(data);
        logger.info("Request processed successfully", { resultCount: result.length });
        return result;
    } catch (error) {
        logger.error("Request processing failed", {
            error: error instanceof Error ? error.message : "Unknown error",
            stack: error instanceof Error ? error.stack : undefined,
        });
        throw error;
    }
};
```

### Module-Specific Logging

```typescript
// For map-related components
import { mapLogger } from "@/lib/modules/map/services/Logger";

mapLogger.info("Map operation", { mapId: "main", operation: "zoom" });

// For database operations
import { dbLogger } from "@/lib/db/logger";

dbLogger.info("Database query", { table: "users", operation: "select" });
```

### Error Logging Pattern

```typescript
const handleError = (error: unknown, context: Record<string, unknown>) => {
    logger.error("Operation failed", {
        error: error instanceof Error ? error.message : "Unknown error",
        stack: error instanceof Error ? error.stack : undefined,
        context,
        timestamp: new Date().toISOString(),
    });
};
```

## Banned Patterns

```typescript
// ❌ BANNED - Console logging
console.log("User clicked button");
console.error("Something went wrong");
console.warn("Deprecated feature");
console.info("Information message");
console.debug("Debug information");

// ❌ BANNED - Other logging libraries
import winston from "winston";
import log4js from "log4js";
import bunyan from "bunyan";

// ❌ BANNED - String concatenation in logs
logger.info("User " + userId + " performed action " + action);

// ❌ BANNED - Non-structured logging
logger.info("User user-123 clicked button save-profile at 2025-06-20T12:00:00Z");
```

## Required Patterns

```typescript
// ✅ REQUIRED - Structured logging with context
logger.info("User action performed", {
    userId: "user-123",
    action: "button-click",
    element: "save-profile",
    timestamp: new Date().toISOString(),
});

// ✅ REQUIRED - Error logging with context
logger.error("API request failed", {
    endpoint: "/api/users",
    method: "POST",
    statusCode: 500,
    error: error.message,
    stack: error.stack,
    retryCount: 2,
});

// ✅ REQUIRED - Performance logging
logger.info("Performance metric", {
    operation: "data-processing",
    duration: 150,
    recordCount: 1000,
    averageTime: 0.15,
});
```

## Log Levels

Use appropriate log levels from [LOG_LEVEL](mdc:src/lib/services/Logger.ts):

- **`logger.error()`**: Errors that need immediate attention
- **`logger.warn()`**: Warning conditions that should be monitored
- **`logger.info()`**: General application flow and important events
- **`logger.debug()`**: Detailed diagnostic information (development only)
- **`logger.trace()`**: Very detailed information (development only)

## Context Data Rules

- **Always include relevant context** in log messages
- **Use structured objects** instead of string interpolation
- **Include timestamps** for time-sensitive operations
- **Add user/session context** when available
- **Include operation metadata** (duration, counts, etc.)
- **Never log sensitive data** (passwords, API keys, tokens)

## Environment Considerations

- **Development**: Use `logger.debug()` and `logger.trace()` freely
- **Production**: Primarily use `logger.info()`, `logger.warn()`, and `logger.error()`
- **External logging**: Prepared for Grafana LGTM stack integration
- **File logging**: Enabled in production with rotation

## Provider Setup

Always wrap applications with LoggerProvider:

```typescript
import { LoggerProvider } from "@/lib/providers/LoggerProvider";

const App = () => (
    <LoggerProvider module="app">
        <Router>
            <Routes>
                <Route path="/" element={<HomePage />} />
            </Routes>
        </Router>
    </LoggerProvider>
);
```

## Migration from Console Logging

Replace console statements with structured logging:

```typescript
// ❌ Before
console.log("User logged in:", userId);
console.error("Database error:", error);

// ✅ After
logger.info("User logged in", { userId });
logger.error("Database error", {
    error: error.message,
    stack: error.stack,
});
```

## Benefits

- **Structured data**: Searchable and filterable logs
- **Context preservation**: Rich metadata with every log
- **Environment awareness**: Appropriate behavior per environment
- **External integration**: Ready for Grafana LGTM stack
- **Performance optimized**: Async logging and sampling support
- **Type safety**: Full TypeScript integration
- **Developer experience**: React hooks and component integration
