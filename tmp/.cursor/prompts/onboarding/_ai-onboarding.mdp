<!-- title: AI Agent Onboarding Guide -->
<!-- description: Essential project information and commands for AI agents working with austdx -->

Welcome! You're working with the **austdx** project, an enterprise-grade TypeScript/React application. This guide provides critical information for successfully navigating and contributing to the project.

## 🚨 **CRITICAL: Package Manager**

**This project uses pnpm, NOT npm!** All commands must use `pnpm` instead of `npm`.

```bash
# ❌ WRONG - Will cause issues
npm install
npm run test

# ✅ CORRECT - Always use pnpm
pnpm install
pnpm test
```

## 📋 **Quick Reference Commands**

### **Development**
```bash
pnpm dev              # Start development server (Vite)
pnpm build            # Build for production
pnpm preview          # Preview production build locally
```

### **UI Components**
```bash
# Shadcn Component Management
pnpm dlx shadcn@latest add button      # Add specific component
pnpm dlx shadcn@latest add select      # Add select component
pnpm dlx shadcn@latest add card        # Add card component
pnpm dlx shadcn@latest add alert       # Add alert component

# ❌ WRONG - Don't manually install Radix UI dependencies
pnpm add @radix-ui/react-select

# ✅ CORRECT - Always use shadcn CLI for UI components
pnpm dlx shadcn@latest add select
```

### **Testing**
```bash
# Unit Tests (Vitest)
pnpm test             # Run tests in watch mode
pnpm test:unit        # Run unit tests once
pnpm test:unit:clean  # Run tests with clean cache (use for CI/accurate results)
pnpm test:coverage    # Generate coverage report

# Map Module Tests
pnpm test:map         # Run map module tests in watch mode
pnpm test:map:clean   # Run map tests with clean cache

# BDD Tests (QuickPickle)
pnpm test:bdd         # Run BDD tests once
pnpm test:bdd:watch   # Run BDD tests in watch mode
pnpm test:bdd:ui      # Open BDD test UI

# E2E Tests (Playwright)
pnpm test:e2e         # Run end-to-end tests
pnpm test:e2e:ui      # Open Playwright UI
```

### **Code Quality**
```bash
# JavaScript/TypeScript (using Biome)
pnpm lint:js          # Lint JS/TS files with Biome
pnpm fix:js           # Fix JS/TS issues with Biome
pnpm format:js        # Format JS/TS files with Biome

# CSS (using Prettier)
pnpm fix:css          # Format CSS files with Prettier
pnpm format:css       # Format CSS files with Prettier

# Combined commands
pnpm lint             # Lint JS/TS only (CSS uses Prettier)
pnpm fix              # Fix both JS/TS (Biome) and CSS (Prettier)
pnpm format           # Format both JS/TS (Biome) and CSS (Prettier)

# Safe commands with timeout protection
pnpm lint:safe        # Safe JS/TS linting with timeout
pnpm fix:js:safe      # Safe JS/TS fixing with timeout

# Legacy commands (still work but use new tools)
pnpm type-check       # Run TypeScript type checking
pnpm format:check     # Check formatting for both JS/TS and CSS
```

### **System Setup**
```bash
pnpm setup            # Install all system dependencies (PostgreSQL, Java, etc.)
pnpm setup:check      # Verify system dependencies
pnpm setup:force      # Force reinstall with conflict resolution
```

### **Database**
```bash
pnpm db:push          # Push schema changes to database
pnpm db:studio        # Open Drizzle Studio for database management
pnpm db:seed          # Seed database with test data
```

### **Visual Reporting**
```bash
pnpm test:allure      # Run tests and generate Allure report
pnpm allure:serve     # Open Allure report in browser
pnpm allure:generate  # Generate static Allure report
pnpm allure:clean     # Clean Allure results
```

### **Storybook**
```bash
pnpm storybook        # Start Storybook development server
pnpm build-storybook  # Build static Storybook
```

## ⚠️ **Known Issues & Workarounds**

### **1. Linting Can Hang**
`pnpm lint` can hang when running on the entire project. **Solution**: Use the new safe lint scripts that have timeouts:
- `pnpm lint:safe` - Runs ESLint with 30s timeout per directory
- `pnpm lint:src` - Lint only src directory
- `pnpm lint:map` - Lint only map module
- `pnpm lint:quick` - Fast cached linting

If you need to fix issues: `pnpm lint:safe:fix`

### **2. Test Default Behavior**
Default `pnpm test` runs in watch mode and can hang. **Solution**: Use the new safe test scripts:
- `pnpm test:safe` - Runs tests with 60s timeout protection
- `pnpm test:safe:watch` - Safe watch mode with no timeout
- `pnpm test:safe:coverage` - Safe coverage run
- `pnpm test:unit` - Standard single run (no watch)

### **3. E2E Tests**
E2E tests require setup script first: `pnpm setup` then `pnpm test:e2e`

### **4. TypeScript Errors**
To check TypeScript errors efficiently:
```bash
pnpm type-check      # Full project type check
```

## 🏗️ **Project Structure**

```
austdx/
├── src/
│   ├── lib/
│   │   ├── modules/     # Feature modules (map, widgets, etc.)
│   │   ├── components/  # Shared React components
│   │   ├── services/    # Business logic services
│   │   ├── utils/       # Utility functions
│   │   ├── hooks/       # Custom React hooks
│   │   └── types/       # TypeScript type definitions
│   └── routes/          # Application routes
├── test/                # Test infrastructure
│   ├── features/        # BDD feature files
│   ├── step-definitions/# BDD step implementations
│   └── utils/           # Shared test utilities
├── e2e/                 # Playwright E2E tests
├── docs/                # Project documentation
├── .cursor/
│   ├── rules/          # Coding standards (34 rule files)
│   └── prompts/        # AI assistant prompts
└── public/             # Static assets
```

## 🎯 **Key Technologies**

- **Frontend**: React 18 + TypeScript 5 + Vite
- **UI Components**: shadcn/ui + Radix UI + Tailwind CSS
- **Backend**: TanStack Start + Drizzle ORM
- **Database**: PostgreSQL 17.5
- **Testing**: Vitest + React Testing Library + Playwright
- **State**: XState Store with Context Providers
- **Logging**: Pino (structured logging - NO console.log!)
- **Maps**: MapLibre GL
- **Linting/Formatting**: Biome (JS/TS) + Prettier (CSS)

## 🔧 **Tool Responsibilities**

The project uses different tools for different file types:

### **Biome** (Primary for JavaScript/TypeScript)
- **Purpose**: Fast linting + formatting for JS/TS files
- **Commands**: `pnpm lint:js`, `pnpm fix:js`, `pnpm format:js`
- **Scope**: `src/`, `test/`, all `.js`, `.jsx`, `.ts`, `.tsx` files
- **Pre-commit**: Used in `lint-staged` for JS/TS files

### **Prettier** (CSS Formatting)
- **Purpose**: Code formatting for CSS files only
- **Commands**: `pnpm fix:css`, `pnpm format:css`
- **Scope**: All `.css` files
- **Pre-commit**: Used in `lint-staged` for CSS files

### **ESLint** (Deprecated for JS/TS)
- **Status**: No longer used for JavaScript/TypeScript files
- **Note**: ESLint config exists but is unused - Biome replaced it

### **Combined Workflows**
```bash
pnpm fix              # Fixes both JS/TS (Biome) + CSS (Prettier)
pnpm format           # Formats both JS/TS (Biome) + CSS (Prettier)
pnpm lint             # Lints JS/TS only (Biome)
```

## 📏 **Coding Standards**

The project enforces **34 strict coding rules** in `.cursor/rules/`:

### **Critical Rules**
1. **NO `console.log`** - Use structured logging with Pino
2. **NO `any` types** - Use `unknown` or proper types
3. **NO `interface`** - Always use `type` declarations
4. **NO duck typing** - Use `satisfies` operator
5. **NO switch statements** - Use lookup objects
6. **USE shadcn CLI** - Always use `pnpm dlx shadcn@latest add` for UI components

### **Import Rules**
```typescript
// ✅ CORRECT
import { useState, useEffect } from "react";
import { isNil, isEmpty } from "lodash";

// ❌ WRONG
import React from "react";
import _ from "lodash";
```

## 🔍 **How to Investigate Issues**

### **1. Check Logs**
```bash
# Development logs appear in terminal
# Look for structured JSON logs, not console output
```

### **2. Run Type Checks**
```bash
pnpm type-check       # Full project type check
pnpm tsc --noEmit src/path/to/file.ts  # Single file check
```

### **3. Test Specific Components**
```bash
pnpm vitest run src/lib/modules/map/__tests__/MapComponent.test.tsx
```

### **4. Check Dependencies**
```bash
pnpm list            # List all dependencies
pnpm outdated        # Check for outdated packages
pnpm why <package>   # Understand why a package is installed
```

## 🚀 **Common Development Workflows**

### **Starting Fresh**
```bash
git clone <repo>
cd austdx
pnpm install         # Install dependencies with pnpm
pnpm setup           # Install system dependencies
pnpm dev             # Start development
```

### **Running Tests Before Commit**
```bash
pnpm type-check      # Check TypeScript
pnpm test:unit:clean # Run all tests once
pnpm lint:fix        # Fix any linting issues
```

### **Debugging Test Failures**
```bash
pnpm test:unit:clean --reporter=verbose  # Verbose test output
pnpm vitest --ui     # Open test UI for debugging
```

### **Working with the Database**
```bash
pnpm db:studio       # Visual database editor
pnpm db:push         # Apply schema changes
pnpm db:seed         # Add test data
```

## 💡 **Pro Tips**

1. **Always use `pnpm`** - The project won't work correctly with npm
2. **Check `.cursor/rules/`** - Contains all coding standards
3. **Use factory functions** - For test data, see `/test/utils/`
4. **Run clean tests** - Use `:clean` variants for accurate results
5. **Check existing patterns** - Look at similar files before implementing

## 🤖 **Agent System Integration**

### **Working with the Agent System**

This project uses a sophisticated `.agent/` system for tracking progress and collaboration:

```bash
# Essential Agent Commands (via Make)
make up              # Update and view progress (currently 93.5%)
make ho              # Generate handoff report
make validate-state  # Validate project state
make metrics         # Generate metrics dashboard

# Direct Python Tools (when needed)
python3 .agent/tools/update-progress-simple.py
python3 .agent/tools/generate-handoff-simple.py "Session notes"
python3 .agent/tools/generate-metrics.py
python3 .agent/tools/validate-state.py
```

### **Agent Workflow**

1. **Start of Session**:
   - Run `make up` to see current progress
   - Review `.agent/current/blockers.md`
   - Check last handoff in `.agent/history/handoffs/`

2. **During Work**:
   - Update blockers as you encounter them
   - Use agent tools for major milestones
   - Reference `.agent/history/deviations/` for context

3. **End of Session**:
   - Generate handoff: `make ho "your session summary"`
   - Update state if needed
   - Check metrics with `make metrics`

### **Key Agent Files**

- **Progress**: `.agent/current/progress.json` - Migration tracking (93.5% complete)
- **State**: `.agent/current/state.md` - Current project state
- **Blockers**: `.agent/current/blockers.md` - Active issues
- **Metrics**: `.agent/current/metrics.md` - Dashboard view
- **Feedback**: `.agent/feedback/` - Team feedback collection

## �� **Documentation**

- **System Setup**: `/docs/system-setup-guide.md`
- **Testing Guide**: `/docs/testing/`
- **Map Module**: `/src/lib/modules/map/__docs__/`
- **Coding Rules**: `/.cursor/rules/index.mdc`

## ⚡ **Performance Benchmarks**

- Test execution: ~526ms for 371 tests
- Individual tests: Must run in < 50ms
- Package installation: ~12s with pnpm (vs ~45s with npm)
- Build time: Check with `pnpm build`

## 🆘 **Getting Help**

1. **Check documentation** in `/docs/`
2. **Review test examples** in `__tests__` directories
3. **Follow patterns** in existing code
4. **Use structured logging** for debugging
5. **Check cursor rules** for coding standards

Remember: This is an enterprise-grade application with strict quality standards. All code must pass linting, type checking, and tests before being accepted.

---

**Welcome aboard! You're now ready to work effectively with the austdx project using pnpm.**
